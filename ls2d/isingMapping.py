import num2d

mass2c = -1.730814685786978

# [binarySearch] shape= (201, 201) auxbond= 20
#  i=  1 (a,b,w)= (0.0, 1.0, 1.0) scale= 0.497850970715 z= None
#  i=  2 (a,b,w)= (0.0, 0.49785097071544626, 0.49785097071544626) scale= 0.248925485358 z= 0.0
#  i=  3 (a,b,w)= (0.24892548535772313, 0.49785097071544626, 0.24892548535772313) scale= 0.373388228037 z= 0.0
#  i=  4 (a,b,w)= (0.37338822803658467, 0.49785097071544626, 0.12446274267886159) scale= 0.435619599376 z= 0.0
#  i=  5 (a,b,w)= (0.43561959937601546, 0.49785097071544626, 0.062231371339430797) scale= 0.466735285046 z= 0.0
#  i=  6 (a,b,w)= (0.46673528504573086, 0.49785097071544626, 0.031115685669715398) scale= 0.482293127881 z= 2.38454210019e+259
#  i=  7 (a,b,w)= (0.46673528504573086, 0.48229312788058853, 0.015557842834857671) scale= 0.474514206463 z= 2.75924092165e-232
#  i=  8 (a,b,w)= (0.47451420646315967, 0.48229312788058853, 0.0077789214174288634) scale= 0.478403667172 z= 2.01516210759e+117
#  i=  9 (a,b,w)= (0.47451420646315967, 0.4784036671718741, 0.0038894607087144317) scale= 0.476458936818 z= 6.82371907873e+45
#  i=  10 (a,b,w)= (0.47451420646315967, 0.47645893681751689, 0.0019447303543572159) scale= 0.47548657164 z= 9758881710.62
#  apply "exact" scale= 0.475215940596
#  i=  11 (a,b,w)= (0.47451420646315967, 0.47548657164033825, 0.00097236517717858018) scale= 0.475215940596 z= 0.999971370576
#  apply "exact" scale= 0.475215940932
#  i=  12 (a,b,w)= (0.47521594059563244, 0.47548657164033825, 0.00027063104470581578) scale= 0.475215940932 z= 1.0
#  converged scale= 0.475215940932 z= 1.0
# v,z,v/z= 0.278726041168 1.0 0.278726041167
# j= 1 pb= (101, 101) cij= 0.278726041167 cij/beta= 0.632481039305
# vapp= [0.63248103930453647]

def test():
   m = 50 #100 #100
   n = 2*m+1
   # Exact
   # ss_tc = [0.63662]
   # Approximate
   ng = 2
   mass2 = mass2c #mass2c #6 #mass2c
   beta = 1.0/(4.0+mass2)
   print '(m,n)=',(m,n),'mass2=',mass2,'beta=',beta,'T=',1.0/beta
   cij = num2d.correlationFunctions(n,mass2=mass2,ng=ng,\
		   		    palst=[(m,m)],pblst=[(m+j,m+j) for j in range(3)],\
				    iprt=1)
   print 'j=',j,'cij=',cij,'cij/beta=',cij/beta
   return 0

if __name__ == '__main__':
   test()
